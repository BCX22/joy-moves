import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import '@tensorflow/tfjs-backend-webgl';
import * as posedetection from '@tensorflow-models/pose-detection';
import { useState, useRef, useCallback, RefObject } from 'react';
import Webcam from "react-webcam";
import * as tf from '@tensorflow/tfjs-core';
import { drawKeypoints as drawKeyPointsU, drawSkeleton as drawSkeletonU } from "../utils/utils"

export default function Home() {

  async function resetBackend(backendName: string) {
    const ENGINE = tf.engine();
    if (!(backendName in ENGINE.registryFactory)) {
      throw new Error(`${backendName} backend is not registered.`);
    }

    if (backendName in ENGINE.registry) {
      const backendFactory = tf.findBackendFactory(backendName);
      tf.removeBackend(backendName);
      tf.registerBackend(backendName, backendFactory);
    }

    await tf.setBackend(backendName);
  }

  async function setBackendAndEnvFlags(flagConfig: any, backend: string) {
    if (flagConfig == null) {
      return;
    } else if (typeof flagConfig !== 'object') {
      throw new Error(
        `An object is expected, while a(n) ${typeof flagConfig} is found.`);
    }

    tf.env().setFlags(flagConfig);

    const [runtime, $backend] = backend.split('-');

    if (runtime === 'tfjs') {
      await resetBackend($backend);
    }
  }

  async function createDetector() {
    let modelType;
    modelType = posedetection.movenet.modelType.SINGLEPOSE_LIGHTNING;
    const modelConfig = { modelType };

    if (false) { // TODO
      // modelConfig.enableTracking = STATE.modelConfig.enableTracking;
    }
    return posedetection.createDetector(posedetection.SupportedModels.MoveNet, modelConfig);
  }



  const drawCanvas = (pose: any, video: any, videoWith: number, videoHeight: number, canvasref: RefObject<HTMLCanvasElement>) => {
    const canvas = canvasref.current!;
    const ctx = canvas.getContext("2d")!;
    canvas.width = videoWith;
    canvas.height = videoHeight;

    drawKeyPointsU(pose["keypoints"], 0.5, ctx);
    drawSkeletonU(pose["keypoints"], 0.5, ctx);
  }


  async function estimatePose() {
    if (detector && webcamRef.current && webcamRef.current.video !== null &&
      webcamRef.current.video.width > 0 && webcamRef.current.video.height > 0 &&
      canvasRef && canvasRef.current) {
      const video = webcamRef.current?.video!;
      const poses = await detector.estimatePoses(video, { maxPoses: 1, flipHorizontal: false });
      drawCanvas(poses[0], video, video.width!, video.height!, canvasRef);
    }
  }

  const webcamRef = useRef<Webcam & HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);


  const flagConfig = {
    "WEBGL_VERSION": 2,
    "WEBGL_CPU_FORWARD": true,
    "WEBGL_PACK": true,
    'WEBGL_FORCE_F16_TEXTURES': false,
    'WEBGL_RENDER_FLOAT32_CAPABLE': true,
    'WEBGL_FLUSH_THRESHOLD': -1,
  }
  setBackendAndEnvFlags(flagConfig, 'tfjs-webgl')

  let detector: posedetection.PoseDetector;
  createDetector().then((d) => {
    detector = d;

    setTimeout(() => {
      setInterval(() => {
        estimatePose();
      }, 100);
    }, 500);
  });

  const videoConstraints = {
    width: 1280,
    height: 720,
    facingMode: "user"
  };

 

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>



      <main className={styles.main}>
        <Webcam
          audio={false}
          height={720}
          ref={webcamRef}
          screenshotFormat="image/jpeg"
          width={1280}
          videoConstraints={videoConstraints}
        />
        <canvas
          ref={canvasRef}
          style={{
            position: "absolute",
            marginLeft: "auto",
            marginRight: "auto",
            left: 0,
            right: 0,
            textAlign: "center",
            zIndex: 9,
            width: 1280,
            height: 720,
          }}
        />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
